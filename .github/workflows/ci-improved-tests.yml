name: improved-tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: main
          POSTGRES_PASSWORD: main
          POSTGRES_DB: main
        ports:
          - 5434:5432
        options: >-
          --health-cmd="pg_isready -U main"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install system build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev python3-dev postgresql-client

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Core app dependencies
          pip install fastapi "uvicorn[standard]" sqlalchemy psycopg2-binary psycopg pydantic[email] pydantic-settings httpx python-jose passlib[bcrypt] python-slugify
          # If project provides requirements.txt
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Test tooling (added async plugins)
          pip install pytest pytest-cov alembic pytest-asyncio pytest-anyio

      - name: Configure env
        run: |
          echo "APP_ENV=test" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql+psycopg://main:main@localhost:5434/main" >> $GITHUB_ENV
          echo "ASYNC_DATABASE_URL=postgresql+psycopg://main:main@localhost:5434/main" >> $GITHUB_ENV
          echo "PGHOST=localhost" >> $GITHUB_ENV
          echo "PGPORT=5434" >> $GITHUB_ENV
          echo "PGUSER=main" >> $GITHUB_ENV
          echo "PGPASSWORD=main" >> $GITHUB_ENV
          echo "PGDATABASE=main" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-please-change" >> $GITHUB_ENV

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" && break
            sleep 2
          done

      - name: Run tests with coverage
        run: |
          mkdir -p reports
          pytest -q --maxfail=1 --cov=app --cov-branch --cov-report=xml:reports/coverage.xml --cov-report=term-missing --junitxml=reports/junit.xml

      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports
